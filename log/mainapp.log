2022-03-30-00:27:34‡Функция:`match`;Шаблон:``;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Результат:{'result': False, 'data': '', 'execute_fun': ''};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:28:31‡Функция:`sub`;Шаблон:`['"]{3}[\w\W^\n]['"]{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template="""\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", """\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template="""\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", """\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n"""[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", """\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", """\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n""", {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", """""", {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{3}[\\w\\W^\\n][\'"]{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:29:07‡Функция:`sub`;Шаблон:`['"]{1}[\w\W^\n]['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(_))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n_[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template=_\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template=_\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n_[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template=_\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", _\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n_[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n_[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", _\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n_[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", _\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n_[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", _\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n_, {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", __, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\W^\\n][\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:29:27‡Функция:`sub`;Шаблон:`['"]{1}[\w\W]['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(_))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n_[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template=_\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template=_\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n_[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template=_\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", _\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n_[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n_[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", _\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n_[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", _\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n_[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", _\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n_, {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", __, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\W][\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:29:30‡Функция:`sub`;Шаблон:`['"]{1}[\w\W^\n]['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(_))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n_[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template=_\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template=_\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n_[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template=_\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", _\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n_[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n_[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", _\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n_[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", _\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n_[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", _\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n_, {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", __, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\W^\\n][\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:29:31‡Функция:`sub`;Шаблон:`['"]{1}[\w\W^\n]['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(_))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n_[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template=_\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template=_\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n_[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template=_\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", _\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n_[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n_[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", _\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n_[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", _\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n_[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", _\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n_, {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", __, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\W^\\n][\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:29:40‡Функция:`sub`;Шаблон:`[\'\"]{1}[\w\W^\n][\'\"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(_))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n_[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template=_\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template=_\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n_[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template=_\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", _\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n_[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n_[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", _\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n_[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", _\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n_[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", _\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n_, {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", __, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\\\'\\"]{1}[\\w\\W^\\n][\\\'\\"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:29:50‡Функция:`sub`;Шаблон:`[\'\"]{1}[\w\W^\n][\'\"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(_))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n_[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template=_\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template=_\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n_[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template=_\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", _\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n_[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n_[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", _\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n_[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", _\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n_[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", _\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n_, {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", __, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\\\'\\"]{1}[\\w\\W^\\n][\\\'\\"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:30:47‡Функция:`sub`;Шаблон:`[\'\"]{1}[\w\W^\n]+[\'\"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\\\'\\"]{1}[\\w\\W^\\n]+[\\\'\\"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:30:54‡Функция:`sub`;Шаблон:`[\'\"]{1}[\w\W]+[\'\"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\\\'\\"]{1}[\\w\\W]+[\\\'\\"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:30:59‡Функция:`sub`;Шаблон:`[\'\"]{1}[\w\W^\n]+[\'\"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\\\'\\"]{1}[\\w\\W^\\n]+[\\\'\\"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:30:59‡Функция:`sub`;Шаблон:`[\'\"]{1}[\w\W^\n]+[\'\"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\\\'\\"]{1}[\\w\\W^\\n]+[\\\'\\"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:31:16‡Функция:`sub`;Шаблон:`[\'\"]{1}[\'\"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_"\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n_"[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template=_"\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n_"[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template=_"\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n_"[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template=_"\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_"[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", _"\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n_"[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template=_"\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n_"[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", _"\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n_"[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", _"\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n_"[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", _"\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n_", {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", ___, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\\\'\\"]{1}[\\\'\\"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:31:24‡Функция:`sub`;Шаблон:`['"]{1}['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_"\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n_"[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template=_"\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n_"[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template=_"\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n_"[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template=_"\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_"[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", _"\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n_"[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template=_"\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n_"[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", _"\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n_"[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", _"\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n_"[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", _"\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n_", {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", ___, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:31:30‡Функция:`sub`;Шаблон:`['"]{1}[\w\d]['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template="""\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", """\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template="""\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", """\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n"""[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", """\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", """\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n""", {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", """""", {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\d][\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:31:31‡Функция:`sub`;Шаблон:`['"]{1}[\w\d]['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template="""\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", """\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template="""\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", """\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n"""[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", """\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", """\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n""", {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", """""", {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\d][\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:31:34‡Функция:`sub`;Шаблон:`['"]{1}[\w\d]+['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    _,\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template="""\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", """\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template="""\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_, "./", """\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l _  -r "$$(version)$$" --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", """\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", """\n\nif __name__ == _:\n    print("$$(name_proj)$$")\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path("README.md", "./", """""", {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\d]+[\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:31:42‡Функция:`sub`;Шаблон:`['"]{1}[\w\W]+['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\W]+[\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:31:46‡Функция:`sub`;Шаблон:`['"]{1}[\w\W^\n]+['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\W^\\n]+[\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:31:51‡Функция:`sub`;Шаблон:`['"]{1}[\w\W^\n^\s]+['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\W^\\n^\\s]+[\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:31:51‡Функция:`sub`;Шаблон:`['"]{1}[\w\W^\n^\s]+['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\W^\\n^\\s]+[\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:31:52‡Функция:`sub`;Шаблон:`['"]{1}[\w\W^\s]+['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\W^\\s]+[\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:31:53‡Функция:`sub`;Шаблон:`['"]{1}[\w\W^\s]+['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\W^\\s]+[\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:31:54‡Функция:`sub`;Шаблон:`['"]{1}[\w\W^\s]+['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\W^\\s]+[\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:31:57‡Функция:`sub`;Шаблон:`['"]{1}[\w\W^\W]+['"]{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'[\'"]{1}[\\w\\W^\\W]+[\'"]{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:33:58‡Функция:`sub`;Шаблон:`["']{1}[\w\W][^\n]+["']{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{1}[\\w\\W][^\\n]+["\']{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:34:13‡Функция:`sub`;Шаблон:`["']{1}[\w\W][^\n]+["']{1}|["']{3}[\w\W][^\n]+["']{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{1}[\\w\\W][^\\n]+["\']{1}|["\']{3}[\\w\\W][^\\n]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:34:18‡Функция:`sub`;Шаблон:`["']{1}[\w\W][^\n]+["']{1}|["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{1}[\\w\\W][^\\n]+["\']{1}|["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:34:41‡Функция:`sub`;Шаблон:`["']{1}[\w\W][^\n]+["']{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{1}[\\w\\W][^\\n]+["\']{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:34:56‡Функция:`sub`;Шаблон:`["']{3}[\w\W][^\n]+["']{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template="""\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", """\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template="""\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", """\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n"""[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", """\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", """\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n""", {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", """""", {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W][^\\n]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:34:59‡Функция:`sub`;Шаблон:`["']{3}[\w\W][^\n]+["']{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template="""\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", """\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template="""\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", """\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n"""[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", """\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", """\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n""", {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", """""", {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W][^\\n]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:35:01‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:35:42‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:35:43‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:35:47‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:35:48‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{2}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{2}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:35:49‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:36:03‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{2}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{2}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:36:03‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{2}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{2}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:36:03‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{2}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{2}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:36:06‡Функция:`sub`;Шаблон:`["']{2}[\w\W]+["']{2}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{2}[\\w\\W]+["\']{2}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:36:19‡Функция:`sub`;Шаблон:`["']{2}[\w\W][^"]+["']{2}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template="""\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template=_"[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", _"[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template=_"[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", """\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n"""[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", _"[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", """\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n""", {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", """""", {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{2}[\\w\\W][^"]+["\']{2}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:36:25‡Функция:`sub`;Шаблон:`["']{3}[\w\W][^"]+["']{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template="""\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template=_[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", _[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template=_[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", """\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n"""[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", _[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", """\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n""", {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", """""", {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W][^"]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:36:43‡Функция:`sub`;Шаблон:`["']{3}[\w\W][^"]+["']{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template="""\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template=_[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", _[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template=_[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", """\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n"""[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", _[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", """\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n""", {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", """""", {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W][^"]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:36:49‡Функция:`sub`;Шаблон:`["']{3}[\w\W]^"+["']{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template="""\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", """\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template="""\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", """\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n"""[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", """\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", """\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n""", {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", """""", {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]^"+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:36:53‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template=_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:37:08‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$:=\[\]\(\)\{\}<>]+["']{3}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = "mg_crp"\nversion = "0.0.1"\nauthor = "Denis Kustov <denis-kustov@rambler.ru>"\n_hide_login= \'denisxab\'\n\n\nreadthedocs_conf = export_path(\n    namefile="conf.py",\n    path="./docs/source/",\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = \'$$(name_proj)$$\'\ncopyright = \'$$(author)$$\'\nauthor = \'$$(author)$$\'\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = \'$$(version)$$\'\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем \'sphinx.ext.*\') или вашими собственными\n# расширения.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.napoleon\',\n    \'sphinx.ext.intersphinx\',\n    "m2r2",\n]\nsource_suffix = [".rst", ".md"]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [\'_templates\']\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете "language" из командной строки.\nlanguage = \'ru\'\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".\nhtml_static_path = [\'_static\']\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "author": author,\n        "version": version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=".readthedocs.yaml",\n    path="./",\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: \'3.10\'\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: "16"\n\t\t# rust: "1.55"\n\t\t# golang: "1.17"\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile="pyproject.toml",\n    path="./",\n    template="""\n[tool.poetry]\nname = "$$(name_proj)$$"\nversion = "$$(version)$$"\ndescription = "Создание файлов конфигураци"\nrepository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"\ndocumentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"\nauthors = ["$$(auth)$$"]\nreadme = "README.md"\nexclude = [\n    "$$(name_proj)$$/.idea",\n    "$$(name_proj)$$/venv",\n    "$$(name_proj)$$/venvs",\n    "$$(name_proj)$$/.git",\n    "$$(name_proj)$$/.gitignore",\n    "$$(name_proj)$$/test",\n    "$$(name_proj)$$/Makefile"\n]\n\n[tool.poetry.dependencies]\npython = "^3.10"\n\n\n[tool.poetry.dev-dependencies]\npytest = "^7.0.0"\nNuitka = "^0.6.19"\nSphinx = "^4.4.0"\nsphinx-autobuild = "^2021.3.14"\nsphinx-rtd-theme = "^1.0.0"\nm2r2 = "^0.3.2"\n\n\n[build-system]\nrequires = ["poetry-core>=1.0.0"]\nbuild-backend = "poetry.core.masonry.api"\n\n"""[1:],\n    kwargs={\n        "name_proj": name_proj,\n        "version": version,\n        "auth": author,\n        "git_login": _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile="index.rst",\n    path="./docs/source/",\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path("use_guide.rst", "./docs/source/", _[1:], {})\n\napi_rst = export_path(namefile="api.rst", path="./docs/source/", template=_[1:], kwargs={})\n\nmakefile = export_path("Makefile", "./", """\nname_bin_file = "$$(name_proj)$$.bin"\nproj_name = "$$(name_proj)$$"\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep\n\n"""[1:], {\n    "name_proj": name_proj,\n    "auth": author,\n    "version": version,\n}, isrewrite=True)\n\ngitignore = export_path(".gitignore", "./", _[1:], {\n    "name_proj": name_proj,\n})\n\nmain_proj = export_path(f"main.py", f"./{name_proj}", """\n\nif __name__ == "__main__":\n    print("$$(name_proj)$$")\n""", {\n    "name_proj": name_proj\n})\n\nreadme_md = export_path("README.md", "./", """""", {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$:=\\[\\]\\(\\)\\{\\}<>]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:37:22‡Функция:`sub`;Шаблон:`["']{1}[\w\W][^\n]+["']{1}`;Текст:`from useconf import export_path

name_proj = "mg_crp"
version = "0.0.1"
author = "Denis Kustov <denis-kustov@rambler.ru>"
_hide_login= 'denisxab'


readthedocs_conf = export_path(
    namefile="conf.py",
    path="./docs/source/",
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = '$$(name_proj)$$'
copyright = '$$(author)$$'
author = '$$(author)$$'

# Полная версия, включая теги alpha/beta/rc
release = '$$(version)$$'

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем 'sphinx.ext.*') или вашими собственными
# расширения.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    "m2r2",
]
source_suffix = [".rst", ".md"]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = ['_templates']

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете "language" из командной строки.
language = 'ru'

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = 'sphinx_rtd_theme'

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем "default.css" будет перезаписывать встроенный "default.css".
html_static_path = ['_static']
"""[1:],
    kwargs={
        "name_proj": name_proj,
        "author": author,
        "version": version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=".readthedocs.yaml",
    path="./",
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: '3.10'
		# You can also specify other tool versions:
		# nodejs: "16"
		# rust: "1.55"
		# golang: "1.17"

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile="pyproject.toml",
    path="./",
    template="""
[tool.poetry]
name = "$$(name_proj)$$"
version = "$$(version)$$"
description = "Создание файлов конфигураци"
repository = "https://github.com/$$(git_login)$$/$$(name_proj)$$.git"
documentation = "https://$$(name_proj)$$.readthedocs.io/ru/latest/index.html"
authors = ["$$(auth)$$"]
readme = "README.md"
exclude = [
    "$$(name_proj)$$/.idea",
    "$$(name_proj)$$/venv",
    "$$(name_proj)$$/venvs",
    "$$(name_proj)$$/.git",
    "$$(name_proj)$$/.gitignore",
    "$$(name_proj)$$/test",
    "$$(name_proj)$$/Makefile"
]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.dev-dependencies]
pytest = "^7.0.0"
Nuitka = "^0.6.19"
Sphinx = "^4.4.0"
sphinx-autobuild = "^2021.3.14"
sphinx-rtd-theme = "^1.0.0"
m2r2 = "^0.3.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

"""[1:],
    kwargs={
        "name_proj": name_proj,
        "version": version,
        "auth": author,
        "git_login": _hide_login,
    }
)

index_rst = export_path(
    namefile="index.rst",
    path="./docs/source/",
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path("use_guide.rst", "./docs/source/", """
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile="api.rst", path="./docs/source/", template="""
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path("Makefile", "./", """
name_bin_file = "$$(name_proj)$$.bin"
proj_name = "$$(name_proj)$$"

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p "$$(name_proj)$$" -a "$$(auth)$$" -v "$$(version)$$" -l "ru"  -r "$$(version)$$" --sep

"""[1:], {
    "name_proj": name_proj,
    "auth": author,
    "version": version,
}, isrewrite=True)

gitignore = export_path(".gitignore", "./", """
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    "name_proj": name_proj,
})

main_proj = export_path(f"main.py", f"./{name_proj}", """

if __name__ == "__main__":
    print("$$(name_proj)$$")
""", {
    "name_proj": name_proj
})

readme_md = export_path("README.md", "./", """""", {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{1}[\\w\\W][^\\n]+["\']{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:37:26‡Функция:`sub`;Шаблон:`["']{1}[\w\W][^\n]+["']{1}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{1}[\\w\\W][^\\n]+["\']{1}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:37:36‡Функция:`sub`;Шаблон:`["']{3}[\w\W][^\n]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W][^\\n]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:37:42‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:37:53‡Функция:`sub`;Шаблон:`["']{3}[\w\W][^'"]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n_\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n_\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n_\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n_[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n_, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W][^\'"]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:38:48‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$:=\[\]\(\)\{\}<>]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$:=\\[\\]\\(\\)\\{\\}<>]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:39:28‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:39:37‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>\n]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>\\n]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:39:39‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:39:56‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>*]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>*]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:39:58‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>\*]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>\\*]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:39:58‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>\*]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>\\*]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:40:05‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>\*`]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n_[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>\\*`]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:40:08‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>\*\`]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n_[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>\\*\\`]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:40:10‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>\*]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>\\*]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:40:18‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:40:25‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>\*]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>\\*]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:40:29‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>\*`]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n_[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>\\*`]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:40:41‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>\*\`]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n_[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>\\*\\`]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:40:43‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>\*]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>\\*]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:40:48‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>\*\`]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n_[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>\\*\\`]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:40:51‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>\*]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>\\*]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:40:56‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>\*\`]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n_[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>\\*\\`]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:41:03‡Функция:`sub`;Шаблон:`["']{3}[\w\d\s_.,/'@\+\-#$\:\=\[\]\(\)\{\}<>\*]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template=_[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n_[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n_[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\d\\s_.,/\'@\\+\\-#$\\:\\=\\[\\]\\(\\)\\{\\}<>\\*]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:41:23‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:41:33‡Функция:`sub`;Шаблон:`(["']{3}[\w\W]+["']{3})`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'(["\']{3}[\\w\\W]+["\']{3})\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:42:15‡Функция:`sub`;Шаблон:`([\w\W]+)(["']{3}[\w\W]+["']{3})([\w\W]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': '_', 'execute_fun': 're.sub(pattern=r\'([\\w\\W]+)(["\']{3}[\\w\\W]+["\']{3})([\\w\\W]+)\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:42:28‡Функция:`sub`;Шаблон:`([\w\W]+)(["']{3}[\w\W]+["']{3})([\w\W]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `\g<1>\g<3>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'([\\w\\W]+)(["\']{3}[\\w\\W]+["\']{3})([\\w\\W]+)\',repl=\'\\g<1>\\g<3>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:43:55‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:44:08‡Функция:`sub`;Шаблон:`["']{2}[\w\W]+["']{2}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{2}[\\w\\W]+["\']{2}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:44:17‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:44:59‡Функция:`findall`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': '[\'"""\\n# Файл конфигурации для конструктора документации Sphinx.\\n#\\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\\n# список см. в документации:\\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\\n\\n# -- Path setup --------------------------------------------------------------\\n\\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\\n\\nimport os\\nimport sys\\nfrom pathlib import Path\\n\\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\\n\\n    #Получить абсолютный путь к своей директории\\n    #:param _file: Путь\\n    #:param back: Сколько отступить назад\\n\\n    res = Path(_file).resolve()\\n    for _ in range(back):\\n        res = res.parent\\n    return res\\n\\n\\nsys.path.insert(0, os.path.abspath(\\\'.\\\'))\\n\\n# Путь к проекту ./../..\\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\\nprint(sys.path)\\n# -- Project information -----------------------------------------------------\\n\\nproject = _\\ncopyright = _\\nauthor = _\\n\\n# Полная версия, включая теги alpha/beta/rc\\nrelease = _\\n\\n# -- General configuration ---------------------------------------------------\\n\\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\\n# расширения.\\nextensions = [\\n    _,\\n    _,\\n    _,\\n    _,\\n    _,\\n]\\nsource_suffix = [_]\\n\\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\\ntemplates_path = [_]\\n\\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\\n# для списка поддерживаемых языков.\\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\\n# Обычно для таких случаев вы задаете _ из командной строки.\\nlanguage = _\\n\\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\\n# каталогов, которые следует игнорировать при поиске исходных файлов.\\n# Этот шаблон также влияет на html_static_path и html_extra_path.\\nexclude_patterns = []\\n\\n# -- Options for HTML output -------------------------------------------------\\n\\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\\n# список встроенных тем.\\nhtml_theme = _\\n\\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\\n# относительно этого каталога. Они копируются после встроенных статических файлов,\\n# поэтому файл с именем _.\\nhtml_static_path = [_]\\n"""[1:],\\n    kwargs={\\n        _: name_proj,\\n        _: author,\\n        _: version,\\n    }, isrewrite=True\\n)\\n\\nreadthedocs_yaml = export_path(\\n    namefile=_,\\n    path=_,\\n    template="""\\n# .readthedocs.yaml\\n# Read the Docs configuration file\\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\\n\\n# Required\\nversion: 2\\n\\n# Set the version of Python and other tools you might need\\nbuild:\\n\\tos: ubuntu-20.04\\n\\ttools:\\n\\t\\tpython: _\\n\\t\\t# You can also specify other tool versions:\\n\\t\\t# nodejs: _\\n\\t\\t# rust: _\\n\\t\\t# golang: _\\n\\nsphinx:\\n\\t# Путь к конфигурациям +++++\\n\\tconfiguration: docs/source/conf.py\\n\\n# Optionally declare the Python requirements required to build your docs\\npython:\\n\\tinstall:\\n\\t\\t# Путь к зависимостям +++++\\n\\t\\t- requirements: docs/requirements.txt\\n# If using Sphinx, optionally build your docs in additional formats such as PDF\\n# formats:\\n#    - pdf\\n"""[1:], kwargs={}, isrewrite=True\\n)\\n\\npyproject_toml = export_path(\\n    namefile=_,\\n    path=_,\\n    template="""\\n[tool.poetry]\\nname = _\\nversion = _\\ndescription = _\\nrepository = _\\ndocumentation = _\\nauthors = [_]\\nreadme = _\\nexclude = [\\n    _,\\n    _,\\n    _,\\n    _,\\n    _,\\n    _,\\n    _\\n]\\n\\n[tool.poetry.dependencies]\\npython = _\\n\\n\\n[tool.poetry.dev-dependencies]\\npytest = _\\nNuitka = _\\nSphinx = _\\nsphinx-autobuild = _\\nsphinx-rtd-theme = _\\nm2r2 = _\\n\\n\\n[build-system]\\nrequires = [_]\\nbuild-backend = _\\n\\n"""[1:],\\n    kwargs={\\n        _: name_proj,\\n        _: version,\\n        _: author,\\n        _: _hide_login,\\n    }\\n)\\n\\nindex_rst = export_path(\\n    namefile=_,\\n    path=_,\\n    template="""\\nНавигация\\n=========\\n\\n* :ref:`genindex`\\n* :ref:`modindex`\\n* :ref:`search`\\n\\n\\n.. toctree::\\n   :maxdepth: 2\\n   :caption: Оглавление:\\n\\n   use_guide\\n   api\\n\\n"""[1:], kwargs={}\\n)\\n\\nuse_guide_rst = export_path(_\\nБыстрый старт\\n=============\\n\\n.. mdinclude:: ../../README.md\\n\\n"""[1:], {})\\n\\napi_rst = export_path(namefile=_\\nОписание APi\\n------------\\n\\n.. automodule:: main\\n    :members:\\n    :undoc-members:\\n    :special-members: __init__\\n    :inherited-members:\\n\\n"""[1:], kwargs={})\\n\\nmakefile = export_path(_\\nname_bin_file = _\\nproj_name = _\\n\\n# Генерировать документацию\\nauto_doc:\\n\\tsphinx-autobuild -b html ./docs/source ./docs/build/html\\n\\n# Создать файл зависимостей для Read The Docs\\nreq_doc:\\n\\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\\n\\n# Скомпилировать проект\\ncompile:\\n\\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\\n\\ndebug:\\n\\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\\n\\ninit:\\n\\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\\n\\n"""[1:], {\\n    _: name_proj,\\n    _: author,\\n    _: version,\\n}, isrewrite=True)\\n\\ngitignore = export_path(_\\n/.idea\\n/venvs\\n/venv\\n/__pycache__\\n/dist\\n/__pycache__/\\n/$$(name_proj)$$/__pycache__/\\n$$(name_proj)$$.bin\\n/main.build\\n"""[1:], {\\n    _: name_proj,\\n})\\n\\nmain_proj = export_path(f_\\n\\nif __name__ == _:\\n    print(_)\\n"""\']', 'execute_fun': 're.findall(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      2022-03-30-00:49:21‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:49:24‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `3`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=3, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'3\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:49:27‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:49:28‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:49:30‡Функция:`sub`;Шаблон:`["']{3}[\w\W]["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:49:32‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:49:37‡Функция:`sub`;Шаблон:`["']{3}[\w\W]{3}["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]{3}["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:49:40‡Функция:`sub`;Шаблон:`["']{3}[\w\W]{4}["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]{4}["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:49:43‡Функция:`sub`;Шаблон:`["']{3}[\w\W]["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:51:10‡Функция:`sub`;Шаблон:`["']{3}[\w\W]["']{3}\n`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]["\']{3}\\n\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:51:15‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}\n`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_Навигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}\\n\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:51:28‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}[\n\d]+`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_Навигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}[\\n\\d]+\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:51:44‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}[\n\d[\]]+`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}[\\n\\d[\\]]+\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:51:47‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}[\n\d\[\]]+`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}[\\n\\d\\[\\]]+\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:51:54‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}[\n\d]+`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_Навигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}[\\n\\d]+\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:51:59‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}[\w\W]+`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}[\\w\\W]+\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:52:20‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}([\w\W]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_\g<1>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}([\\w\\W]+)\',repl=\'_\\g<1>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:52:51‡Функция:`sub`;Шаблон:`([\w\W]+)["']{3}[\w\W]+["']{3}([\w\W]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': '_', 'execute_fun': 're.sub(pattern=r\'([\\w\\W]+)["\']{3}[\\w\\W]+["\']{3}([\\w\\W]+)\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:53:10‡Функция:`sub`;Шаблон:`([\w\W]+)(["']{3}[\w\W]+["']{3})([\w\W]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `\g<1>\g<2>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n"""', 'execute_fun': 're.sub(pattern=r\'([\\w\\W]+)(["\']{3}[\\w\\W]+["\']{3})([\\w\\W]+)\',repl=\'\\g<1>\\g<2>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:53:22‡Функция:`sub`;Шаблон:`([\w\W]+)(["']{3}[\w\W]+["']{3})([\w\W]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `\g<1>\g<3>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'([\\w\\W]+)(["\']{3}[\\w\\W]+["\']{3})([\\w\\W]+)\',repl=\'\\g<1>\\g<3>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:53:22‡Функция:`sub`;Шаблон:`([\w\W]+)(["']{3}[\w\W]+["']{3})([\w\W]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `\g<1>\g<3>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'([\\w\\W]+)(["\']{3}[\\w\\W]+["\']{3})([\\w\\W]+)\',repl=\'\\g<1>\\g<3>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:53:22‡Функция:`sub`;Шаблон:`([\w\W]+)(["']{3}[\w\W]+["']{3})([\w\W]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `\g<1>\g<3>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'([\\w\\W]+)(["\']{3}[\\w\\W]+["\']{3})([\\w\\W]+)\',repl=\'\\g<1>\\g<3>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:53:43‡Функция:`sub`;Шаблон:`([\w\W][^'"]+)(["']{3}[\w\W]+["']{3})([\w\W][^'"]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `\g<1>\g<3>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'([\\w\\W][^\'"]+)(["\']{3}[\\w\\W]+["\']{3})([\\w\\W][^\'"]+)\',repl=\'\\g<1>\\g<3>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:53:56‡Функция:`sub`;Шаблон:`([\w\W][^'"]{3})(["']{3}[\w\W]+["']{3})([\w\W][^'"]{3})`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `\g<1>\g<3>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'([\\w\\W][^\'"]{3})(["\']{3}[\\w\\W]+["\']{3})([\\w\\W][^\'"]{3})\',repl=\'\\g<1>\\g<3>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:54:00‡Функция:`sub`;Шаблон:`([\w\W][^'"]{3})(["']{3}[\w\W]+["']{3})([\w\W][^'"]{2})`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `\g<1>\g<3>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'([\\w\\W][^\'"]{3})(["\']{3}[\\w\\W]+["\']{3})([\\w\\W][^\'"]{2})\',repl=\'\\g<1>\\g<3>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:54:01‡Функция:`sub`;Шаблон:`([\w\W][^'"]{3})(["']{3}[\w\W]+["']{3})([\w\W][^'"]{3})`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `\g<1>\g<3>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'([\\w\\W][^\'"]{3})(["\']{3}[\\w\\W]+["\']{3})([\\w\\W][^\'"]{3})\',repl=\'\\g<1>\\g<3>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:54:15‡Функция:`sub`;Шаблон:`([\w\W][^'"]{3})(["']{3}[\w\W]+["']{3})([\w\W]+[^'"]{3})`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `\g<1>\g<3>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'([\\w\\W][^\'"]{3})(["\']{3}[\\w\\W]+["\']{3})([\\w\\W]+[^\'"]{3})\',repl=\'\\g<1>\\g<3>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:54:16‡Функция:`sub`;Шаблон:`([\w\W][^'"]{3})(["']{3}[\w\W]+["']{3})([\w\W]+[^'"]{3})`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `\g<1>\g<3>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'([\\w\\W][^\'"]{3})(["\']{3}[\\w\\W]+["\']{3})([\\w\\W]+[^\'"]{3})\',repl=\'\\g<1>\\g<3>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:54:19‡Функция:`sub`;Шаблон:`([\w\W]+[^'"]{3})(["']{3}[\w\W]+["']{3})([\w\W]+[^'"]{3})`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `\g<1>\g<3>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'([\\w\\W]+[^\'"]{3})(["\']{3}[\\w\\W]+["\']{3})([\\w\\W]+[^\'"]{3})\',repl=\'\\g<1>\\g<3>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:55:09‡Функция:`sub`;Шаблон:`(?:\n[\t ]*)\"{3}(.*?)\"{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'(?:\\n[\\t ]*)\\"{3}(.*?)\\"{3}\',repl=\'\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:55:11‡Функция:`sub`;Шаблон:`(?:\n[\t ]*)\"{3}(.*?)\"{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'(?:\\n[\\t ]*)\\"{3}(.*?)\\"{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:55:12‡Функция:`sub`;Шаблон:`(?:\n[\t ]*)\"{3}(.*?)\"{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'(?:\\n[\\t ]*)\\"{3}(.*?)\\"{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:55:12‡Функция:`sub`;Шаблон:`(?:\n[\t ]*)\"{3}(.*?)\"{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'(?:\\n[\\t ]*)\\"{3}(.*?)\\"{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:55:19‡Функция:`findall`;Шаблон:`(?:\n[\t ]*)\"{3}(.*?)\"{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': False, 'data': '', 'execute_fun': 're.findall(pattern=r\'(?:\\n[\\t ]*)\\"{3}(.*?)\\"{3}\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:55:20‡Функция:`findall`;Шаблон:`(?:\n[\t ]*)\"{3}(.*?)\"{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': False, 'data': '', 'execute_fun': 're.findall(pattern=r\'(?:\\n[\\t ]*)\\"{3}(.*?)\\"{3}\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-00:55:20‡Функция:`findall`;Шаблон:`(?:\n[\t ]*)\"{3}(.*?)\"{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': False, 'data': '', 'execute_fun': 're.findall(pattern=r\'(?:\\n[\\t ]*)\\"{3}(.*?)\\"{3}\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:03:23‡Функция:`findall`;Шаблон:``;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': False, 'data': '', 'execute_fun': ''};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:03:35‡Функция:`findall`;Шаблон:`["']{3}[\w\W]+["']{3}[^'"]`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': '[\'"""\\n# Файл конфигурации для конструктора документации Sphinx.\\n#\\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\\n# список см. в документации:\\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\\n\\n# -- Path setup --------------------------------------------------------------\\n\\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\\n\\nimport os\\nimport sys\\nfrom pathlib import Path\\n\\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\\n\\n    #Получить абсолютный путь к своей директории\\n    #:param _file: Путь\\n    #:param back: Сколько отступить назад\\n\\n    res = Path(_file).resolve()\\n    for _ in range(back):\\n        res = res.parent\\n    return res\\n\\n\\nsys.path.insert(0, os.path.abspath(\\\'.\\\'))\\n\\n# Путь к проекту ./../..\\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\\nprint(sys.path)\\n# -- Project information -----------------------------------------------------\\n\\nproject = _\\ncopyright = _\\nauthor = _\\n\\n# Полная версия, включая теги alpha/beta/rc\\nrelease = _\\n\\n# -- General configuration ---------------------------------------------------\\n\\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\\n# расширения.\\nextensions = [\\n    _,\\n    _,\\n    _,\\n    _,\\n    _,\\n]\\nsource_suffix = [_]\\n\\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\\ntemplates_path = [_]\\n\\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\\n# для списка поддерживаемых языков.\\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\\n# Обычно для таких случаев вы задаете _ из командной строки.\\nlanguage = _\\n\\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\\n# каталогов, которые следует игнорировать при поиске исходных файлов.\\n# Этот шаблон также влияет на html_static_path и html_extra_path.\\nexclude_patterns = []\\n\\n# -- Options for HTML output -------------------------------------------------\\n\\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\\n# список встроенных тем.\\nhtml_theme = _\\n\\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\\n# относительно этого каталога. Они копируются после встроенных статических файлов,\\n# поэтому файл с именем _.\\nhtml_static_path = [_]\\n"""[1:],\\n    kwargs={\\n        _: name_proj,\\n        _: author,\\n        _: version,\\n    }, isrewrite=True\\n)\\n\\nreadthedocs_yaml = export_path(\\n    namefile=_,\\n    path=_,\\n    template="""\\n# .readthedocs.yaml\\n# Read the Docs configuration file\\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\\n\\n# Required\\nversion: 2\\n\\n# Set the version of Python and other tools you might need\\nbuild:\\n\\tos: ubuntu-20.04\\n\\ttools:\\n\\t\\tpython: _\\n\\t\\t# You can also specify other tool versions:\\n\\t\\t# nodejs: _\\n\\t\\t# rust: _\\n\\t\\t# golang: _\\n\\nsphinx:\\n\\t# Путь к конфигурациям +++++\\n\\tconfiguration: docs/source/conf.py\\n\\n# Optionally declare the Python requirements required to build your docs\\npython:\\n\\tinstall:\\n\\t\\t# Путь к зависимостям +++++\\n\\t\\t- requirements: docs/requirements.txt\\n# If using Sphinx, optionally build your docs in additional formats such as PDF\\n# formats:\\n#    - pdf\\n"""[1:], kwargs={}, isrewrite=True\\n)\\n\\npyproject_toml = export_path(\\n    namefile=_,\\n    path=_,\\n    template="""\\n[tool.poetry]\\nname = _\\nversion = _\\ndescription = _\\nrepository = _\\ndocumentation = _\\nauthors = [_]\\nreadme = _\\nexclude = [\\n    _,\\n    _,\\n    _,\\n    _,\\n    _,\\n    _,\\n    _\\n]\\n\\n[tool.poetry.dependencies]\\npython = _\\n\\n\\n[tool.poetry.dev-dependencies]\\npytest = _\\nNuitka = _\\nSphinx = _\\nsphinx-autobuild = _\\nsphinx-rtd-theme = _\\nm2r2 = _\\n\\n\\n[build-system]\\nrequires = [_]\\nbuild-backend = _\\n\\n"""[1:],\\n    kwargs={\\n        _: name_proj,\\n        _: version,\\n        _: author,\\n        _: _hide_login,\\n    }\\n)\\n\\nindex_rst = export_path(\\n    namefile=_,\\n    path=_,\\n    template="""\\nНавигация\\n=========\\n\\n* :ref:`genindex`\\n* :ref:`modindex`\\n* :ref:`search`\\n\\n\\n.. toctree::\\n   :maxdepth: 2\\n   :caption: Оглавление:\\n\\n   use_guide\\n   api\\n\\n"""[1:], kwargs={}\\n)\\n\\nuse_guide_rst = export_path(_\\nБыстрый старт\\n=============\\n\\n.. mdinclude:: ../../README.md\\n\\n"""[1:], {})\\n\\napi_rst = export_path(namefile=_\\nОписание APi\\n------------\\n\\n.. automodule:: main\\n    :members:\\n    :undoc-members:\\n    :special-members: __init__\\n    :inherited-members:\\n\\n"""[1:], kwargs={})\\n\\nmakefile = export_path(_\\nname_bin_file = _\\nproj_name = _\\n\\n# Генерировать документацию\\nauto_doc:\\n\\tsphinx-autobuild -b html ./docs/source ./docs/build/html\\n\\n# Создать файл зависимостей для Read The Docs\\nreq_doc:\\n\\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\\n\\n# Скомпилировать проект\\ncompile:\\n\\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\\n\\ndebug:\\n\\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\\n\\ninit:\\n\\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\\n\\n"""[1:], {\\n    _: name_proj,\\n    _: author,\\n    _: version,\\n}, isrewrite=True)\\n\\ngitignore = export_path(_\\n/.idea\\n/venvs\\n/venv\\n/__pycache__\\n/dist\\n/__pycache__/\\n/$$(name_proj)$$/__pycache__/\\n$$(name_proj)$$.bin\\n/main.build\\n"""[1:], {\\n    _: name_proj,\\n})\\n\\nmain_proj = export_path(f_\\n\\nif __name__ == _:\\n    print(_)\\n""",\']', 'execute_fun': 're.findall(pattern=r\'["\']{3}[\\w\\W]+["\']{3}[^\'"]\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:03:41‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}[^'"]`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_ {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}[^\'"]\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:03:51‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}[^'"]+`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}[^\'"]+\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:04:02‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}[^'"]*`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}[^\'"]*\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:04:22‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}([^'"]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_\g<1>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}([^\'"]+)\',repl=\'_\\g<1>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:06:28‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}(?!['"]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}(?![\'"]+)\',repl=\'\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:06:30‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}(?!['"]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}(?![\'"]+)\',repl=\'\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:06:30‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}(?!['"]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}(?![\'"]+)\',repl=\'\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:06:36‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}(?!)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}(?!)\',repl=\'\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:06:41‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}(?![\w\W])`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}(?![\\w\\W])\',repl=\'\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:06:43‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}(?![\w\W]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}(?![\\w\\W]+)\',repl=\'\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:06:58‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+["']{3}|(?![\w\W]+)`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+["\']{3}|(?![\\w\\W]+)\',repl=\'\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:07:13‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+(?!'")["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+(?!\'")["\']{3}\',repl=\'\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:07:15‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+(?!'')["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+(?!\'\')["\']{3}\',repl=\'\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:07:17‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+(?!"')["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+(?!"\')["\']{3}\',repl=\'\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:07:33‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+("')["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `\g<1>`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+("\')["\']{3}\',repl=\'\\g<1>\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:08:01‡Функция:`sub`;Шаблон:`["']{3}[\w\W]+(?!\n)["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template=_, {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W]+(?!\\n)["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
2022-03-30-01:08:05‡Функция:`sub`;Шаблон:`["']{3}[\w\W](?!\n)["']{3}`;Текст:`from useconf import export_path

name_proj = _
version = _
author = _
_hide_login= _


readthedocs_conf = export_path(
    namefile=_,
    path=_,
    template="""
# Файл конфигурации для конструктора документации Sphinx.
#
# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного
# список см. в документации:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,
# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к
# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.

import os
import sys
from pathlib import Path

def absolute_path_dir(_file: str, back: int = 1) -> Path:

    #Получить абсолютный путь к своей директории
    #:param _file: Путь
    #:param back: Сколько отступить назад

    res = Path(_file).resolve()
    for _ in range(back):
        res = res.parent
    return res


sys.path.insert(0, os.path.abspath('.'))

# Путь к проекту ./../..
sys.path.insert(0, str(absolute_path_dir(__file__, 3)))
print(sys.path)
# -- Project information -----------------------------------------------------

project = _
copyright = _
author = _

# Полная версия, включая теги alpha/beta/rc
release = _

# -- General configuration ---------------------------------------------------

# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть
# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными
# расширения.
extensions = [
    _,
    _,
    _,
    _,
    _,
]
source_suffix = [_]

# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.
templates_path = [_]

# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации
# для списка поддерживаемых языков.
# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.
# Обычно для таких случаев вы задаете _ из командной строки.
language = _

# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и
# каталогов, которые следует игнорировать при поиске исходных файлов.
# Этот шаблон также влияет на html_static_path и html_extra_path.
exclude_patterns = []

# -- Options for HTML output -------------------------------------------------

# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для
# список встроенных тем.
html_theme = _

# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),
# относительно этого каталога. Они копируются после встроенных статических файлов,
# поэтому файл с именем _.
html_static_path = [_]
"""[1:],
    kwargs={
        _: name_proj,
        _: author,
        _: version,
    }, isrewrite=True
)

readthedocs_yaml = export_path(
    namefile=_,
    path=_,
    template="""
# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the version of Python and other tools you might need
build:
	os: ubuntu-20.04
	tools:
		python: _
		# You can also specify other tool versions:
		# nodejs: _
		# rust: _
		# golang: _

sphinx:
	# Путь к конфигурациям +++++
	configuration: docs/source/conf.py

# Optionally declare the Python requirements required to build your docs
python:
	install:
		# Путь к зависимостям +++++
		- requirements: docs/requirements.txt
# If using Sphinx, optionally build your docs in additional formats such as PDF
# formats:
#    - pdf
"""[1:], kwargs={}, isrewrite=True
)

pyproject_toml = export_path(
    namefile=_,
    path=_,
    template="""
[tool.poetry]
name = _
version = _
description = _
repository = _
documentation = _
authors = [_]
readme = _
exclude = [
    _,
    _,
    _,
    _,
    _,
    _,
    _
]

[tool.poetry.dependencies]
python = _


[tool.poetry.dev-dependencies]
pytest = _
Nuitka = _
Sphinx = _
sphinx-autobuild = _
sphinx-rtd-theme = _
m2r2 = _


[build-system]
requires = [_]
build-backend = _

"""[1:],
    kwargs={
        _: name_proj,
        _: version,
        _: author,
        _: _hide_login,
    }
)

index_rst = export_path(
    namefile=_,
    path=_,
    template="""
Навигация
=========

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


.. toctree::
   :maxdepth: 2
   :caption: Оглавление:

   use_guide
   api

"""[1:], kwargs={}
)

use_guide_rst = export_path(_
Быстрый старт
=============

.. mdinclude:: ../../README.md

"""[1:], {})

api_rst = export_path(namefile=_
Описание APi
------------

.. automodule:: main
    :members:
    :undoc-members:
    :special-members: __init__
    :inherited-members:

"""[1:], kwargs={})

makefile = export_path(_
name_bin_file = _
proj_name = _

# Генерировать документацию
auto_doc:
	sphinx-autobuild -b html ./docs/source ./docs/build/html

# Создать файл зависимостей для Read The Docs
req_doc:
	poetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;

# Скомпилировать проект
compile:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)

debug:
	python -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output

init:
	pip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep

"""[1:], {
    _: name_proj,
    _: author,
    _: version,
}, isrewrite=True)

gitignore = export_path(_
/.idea
/venvs
/venv
/__pycache__
/dist
/__pycache__/
/$$(name_proj)$$/__pycache__/
$$(name_proj)$$.bin
/main.build
"""[1:], {
    _: name_proj,
})

main_proj = export_path(f_

if __name__ == _:
    print(_)
""", {
    _: name_proj
})

readme_md = export_path(_, {})

EXPORT_PATH = (
    pyproject_toml,
    readthedocs_yaml,
    readthedocs_conf,
    makefile,
    gitignore,
    index_rst,
    use_guide_rst,
    api_rst,
    main_proj,
    readme_md,
)
`;Текст для замены: `_`Результат:{'result': True, 'data': 'from useconf import export_path\n\nname_proj = _\nversion = _\nauthor = _\n_hide_login= _\n\n\nreadthedocs_conf = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# Файл конфигурации для конструктора документации Sphinx.\n#\n# Этот файл содержит только выбор наиболее распространенных опций. Для получения полного\n# список см. в документации:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# Если расширения (или модули для документирования с помощью autodoc) находятся в другом каталоге,\n# добавьте эти каталоги в sys.path здесь. Если каталог является относительным по отношению к\n# корня документации, используйте os.path.abspath, чтобы сделать его абсолютным, как показано здесь.\n\nimport os\nimport sys\nfrom pathlib import Path\n\ndef absolute_path_dir(_file: str, back: int = 1) -> Path:\n\n    #Получить абсолютный путь к своей директории\n    #:param _file: Путь\n    #:param back: Сколько отступить назад\n\n    res = Path(_file).resolve()\n    for _ in range(back):\n        res = res.parent\n    return res\n\n\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n# Путь к проекту ./../..\nsys.path.insert(0, str(absolute_path_dir(__file__, 3)))\nprint(sys.path)\n# -- Project information -----------------------------------------------------\n\nproject = _\ncopyright = _\nauthor = _\n\n# Полная версия, включая теги alpha/beta/rc\nrelease = _\n\n# -- General configuration ---------------------------------------------------\n\n# Добавьте сюда имена любых модулей расширения Sphinx в виде строк. Это могут быть\n# расширениями, поставляемыми с Sphinx (с именем _) или вашими собственными\n# расширения.\nextensions = [\n    _,\n    _,\n    _,\n    _,\n    _,\n]\nsource_suffix = [_]\n\n# Добавьте сюда все пути, содержащие шаблоны, относительно этой директории.\ntemplates_path = [_]\n\n# Язык для содержимого, автогенерируемого Sphinx. Обратитесь к документации\n# для списка поддерживаемых языков.\n# Этот параметр также используется, если вы выполняете перевод содержимого через каталоги gettext.\n# Обычно для таких случаев вы задаете _ из командной строки.\nlanguage = _\n\n# Список шаблонов, относительно исходного каталога, которые соответствуют файлам и\n# каталогов, которые следует игнорировать при поиске исходных файлов.\n# Этот шаблон также влияет на html_static_path и html_extra_path.\nexclude_patterns = []\n\n# -- Options for HTML output -------------------------------------------------\n\n# Тема, используемая для страниц HTML и HTML-справки.  См. документацию для\n# список встроенных тем.\nhtml_theme = _\n\n# Добавьте сюда все пути, содержащие пользовательские статические файлы (например, таблицы стилей),\n# относительно этого каталога. Они копируются после встроенных статических файлов,\n# поэтому файл с именем _.\nhtml_static_path = [_]\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: author,\n        _: version,\n    }, isrewrite=True\n)\n\nreadthedocs_yaml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n\tos: ubuntu-20.04\n\ttools:\n\t\tpython: _\n\t\t# You can also specify other tool versions:\n\t\t# nodejs: _\n\t\t# rust: _\n\t\t# golang: _\n\nsphinx:\n\t# Путь к конфигурациям +++++\n\tconfiguration: docs/source/conf.py\n\n# Optionally declare the Python requirements required to build your docs\npython:\n\tinstall:\n\t\t# Путь к зависимостям +++++\n\t\t- requirements: docs/requirements.txt\n# If using Sphinx, optionally build your docs in additional formats such as PDF\n# formats:\n#    - pdf\n"""[1:], kwargs={}, isrewrite=True\n)\n\npyproject_toml = export_path(\n    namefile=_,\n    path=_,\n    template="""\n[tool.poetry]\nname = _\nversion = _\ndescription = _\nrepository = _\ndocumentation = _\nauthors = [_]\nreadme = _\nexclude = [\n    _,\n    _,\n    _,\n    _,\n    _,\n    _,\n    _\n]\n\n[tool.poetry.dependencies]\npython = _\n\n\n[tool.poetry.dev-dependencies]\npytest = _\nNuitka = _\nSphinx = _\nsphinx-autobuild = _\nsphinx-rtd-theme = _\nm2r2 = _\n\n\n[build-system]\nrequires = [_]\nbuild-backend = _\n\n"""[1:],\n    kwargs={\n        _: name_proj,\n        _: version,\n        _: author,\n        _: _hide_login,\n    }\n)\n\nindex_rst = export_path(\n    namefile=_,\n    path=_,\n    template="""\nНавигация\n=========\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Оглавление:\n\n   use_guide\n   api\n\n"""[1:], kwargs={}\n)\n\nuse_guide_rst = export_path(_\nБыстрый старт\n=============\n\n.. mdinclude:: ../../README.md\n\n"""[1:], {})\n\napi_rst = export_path(namefile=_\nОписание APi\n------------\n\n.. automodule:: main\n    :members:\n    :undoc-members:\n    :special-members: __init__\n    :inherited-members:\n\n"""[1:], kwargs={})\n\nmakefile = export_path(_\nname_bin_file = _\nproj_name = _\n\n# Генерировать документацию\nauto_doc:\n\tsphinx-autobuild -b html ./docs/source ./docs/build/html\n\n# Создать файл зависимостей для Read The Docs\nreq_doc:\n\tpoetry export -f requirements.txt --output ./docs/requirements.txt --dev --without-hashes;\n\n# Скомпилировать проект\ncompile:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file)\n\ndebug:\n\tpython -m nuitka --follow-imports $(proj_name)/main.py -o $(name_bin_file) --remove-output\n\ninit:\n\tpip install poetry && poetry install && mkdir docs && sphinx-quickstart -p _ --sep\n\n"""[1:], {\n    _: name_proj,\n    _: author,\n    _: version,\n}, isrewrite=True)\n\ngitignore = export_path(_\n/.idea\n/venvs\n/venv\n/__pycache__\n/dist\n/__pycache__/\n/$$(name_proj)$$/__pycache__/\n$$(name_proj)$$.bin\n/main.build\n"""[1:], {\n    _: name_proj,\n})\n\nmain_proj = export_path(f_\n\nif __name__ == _:\n    print(_)\n""", {\n    _: name_proj\n})\n\nreadme_md = export_path(_, {})\n\nEXPORT_PATH = (\n    pyproject_toml,\n    readthedocs_yaml,\n    readthedocs_conf,\n    makefile,\n    gitignore,\n    index_rst,\n    use_guide_rst,\n    api_rst,\n    main_proj,\n    readme_md,\n)\n', 'execute_fun': 're.sub(pattern=r\'["\']{3}[\\w\\W](?!\\n)["\']{3}\',repl=\'_\',string=\'...\')'};‡views.py‡post‡INFO‡72‡‡
